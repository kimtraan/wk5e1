[{"/Users/kimtran/Documents/HCDE438/wk5/src/index.js":"1","/Users/kimtran/Documents/HCDE438/wk5/src/App.js":"2","/Users/kimtran/Documents/HCDE438/wk5/src/TextInput.js":"3","/Users/kimtran/Documents/HCDE438/wk5/src/Message.js":"4","/Users/kimtran/Documents/HCDE438/wk5/src/NamePicker.js":"5","/Users/kimtran/Documents/HCDE438/wk5/src/db.js":"6"},{"size":219,"mtime":1643922389185,"results":"7","hashOfConfig":"8"},{"size":1615,"mtime":1644519604471,"results":"9","hashOfConfig":"8"},{"size":990,"mtime":1644269132236,"results":"10","hashOfConfig":"8"},{"size":245,"mtime":1644483099849,"results":"11","hashOfConfig":"8"},{"size":1024,"mtime":1644482923475,"results":"12","hashOfConfig":"8"},{"size":1843,"mtime":1644519283574,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1njjzom",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"25"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},"/Users/kimtran/Documents/HCDE438/wk5/src/index.js",[],["32","33"],"/Users/kimtran/Documents/HCDE438/wk5/src/App.js",["34","35","36"],"import \"./App.css\";\nimport TextInput from \"./TextInput.js\";\nimport {useState} from 'react';\nimport Message from \"./Message\";\nimport ChatBubble from 'react-chat-bubble';\nimport Camera from 'react-snap-pic'\nimport { AiFillEdit } from \"react-icons/ai\";\nimport NamePicker from './NamePicker.js';\nimport \"./NamePicker.css\";\nimport {useDB, db} from './db.js';\n\n\n\nfunction App() {\n  let [showCamera, setShowCamera] = useState(false)\n  // let [messages, setMessages] = useState([]);\n  const messages = useDB();\n  let [username, setUsername] = useState(\"\");\n  function sendMessage(text) {\n    const newMessage = {\n      text,\n      time: Date.now(),\n      user: username,\n    };\n    db.send(newMessage);\n\n  }\n\n  console.log(messages);\n  function takePicture(img) {\n    console.log(img)\n    setShowCamera(false)\n}\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n      {showCamera && <Camera takePicture={takePicture} />}\n      <style>\n        /*imports poppins font from google*/\n        @import url('https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&display=swap');\n      </style>\n        <div className=\"logo\" />\n        <span className=\"title\">Chipchat</span>\n        <div className = \"username\">\n          <NamePicker save = {setUsername}/>\n        </div>\n      </header>\n      <div className=\"messages\">\n        {messages.map((msg) => {\n          return <Message {...msg} />;\n        })}\n      </div>\n      {/* <ChatBubble messages = {...msg} */}\n      <TextInput sendMessage={sendMessage}\n           showCamera={()=>setShowCamera(true)}\n      />\n    </div>\n  );\n}\n\nexport default App;","/Users/kimtran/Documents/HCDE438/wk5/src/TextInput.js",["37","38","39"],"import React from \"react\";\nimport \"./TextInput.css\";\nimport {useState} from \"react\";\nimport { FiSend, FiCamera } from 'react-icons/fi'\n\nfunction TextInput(props) {\n    const [text, setText] = useState(\"\");\n  \n    function send() {\n      props.sendMessage(text);\n      setText(\"\");\n    }\n    function onKeyPress(e) {\n      if (e.key === \"Enter\") {\n        send();\n      }\n    }\n  \n\n    return (\n        <footer className = \"footer\">\n           <button onClick={props.showCamera}\n              style={{left:10, right:'auto'}}>\n              <FiCamera style={{height:15, width:15}} />\n            </button>\n            <input className=\"text-input\" placeholder =\"write a message...\" value={text}\n            value = {text}\n            onChange = {(e) => setText(e.target.value)}\n            onKeyPress = {onKeyPress}\n           />\n            <button className=\"send\" onClick = {send}><img src = \"Arrow.png\"></img>\n            </button> \n        </footer>\n    );\n}\n\nexport default TextInput;\n\n","/Users/kimtran/Documents/HCDE438/wk5/src/Message.js",[],["40","41"],"/Users/kimtran/Documents/HCDE438/wk5/src/NamePicker.js",["42"],"import {useState} from 'react';\nimport \"./NamePicker.css\";\nimport { FiEdit } from \"react-icons/fi\";\n\nfunction NamePicker (props) {\n    const [editName, setEditName] = useState(false);\n    const [name, setName] = useState('');\n\n    function save() {\n        props.save(name);\n        setEditName(false);\n\n    };\n\n    function ok () {\n        props.setUsername(name);\n        setEditName(false);\n\n    }\n\n\n    if (editName) {\n        return (\n            <>\n            <div></div>\n            <input placeholder = \"Username\" value = {name}\n            onChange={e=>setName(e.target.value)}\n            >\n            </input>\n            <button class ='inputbtn' onClick = {save}>OK</button>\n            </>\n        )\n    } else {\n        return (\n            <>\n            <div>{name}</div>\n            {/* <button class ='inputbtn' onClick ={() => setEditName(true)} ></button> */}\n            <FiEdit size=\"24\" onClick={() => setEditName(true)} />\n            </>\n\n        )\n    }\n     \n\n}\n\nexport default NamePicker;\n\n\n\n\n","/Users/kimtran/Documents/HCDE438/wk5/src/db.js",["43","44"],"import { useState, useEffect } from \"react\";\nimport { initializeApp } from \"firebase/app\";\nimport {\n  getFirestore,\n  collection,\n  doc,\n  addDoc,\n  setDoc,\n  where,\n  deleteDoc,\n  onSnapshot,\n  query,\n} from \"firebase/firestore\";\n\nlet store;\nconst collection_name = \"messages\";\n\nfunction useDB(room) {\n  const [messages, setMessages] = useState([]);\n\n  function add(m) {\n    setMessages((current) => {\n      const msgs = [m, ...current];\n      msgs.sort(\n        (a, b) => (b.date && b.date.seconds) - (a.date && a.date.seconds)\n      );\n      return msgs;\n    });\n  }\n  function remove(id) {\n    setMessages((current) => current.filter((m) => m.id !== id));\n  }\n\n  useEffect(async () => {\n    const q = room\n      ? query(collection(store, collection_name), where(\"room\", \"==\", room))\n      : query(collection(store, collection_name));\n    const unsubscribe = onSnapshot(q, (snapshot) => {\n      snapshot.docChanges().forEach((change) => {\n        const { doc, type } = change;\n        if (type === \"added\") add({ ...doc.data(), id: doc.id });\n        if (type === \"removed\") remove(doc.id);\n      });\n    });\n  }, [room]);\n  return messages;\n}\n\nconst db = {};\ndb.send = async function (msg) {\n  return addDoc(collection(store, collection_name), msg);\n};\ndb.edit = async function (id, msg) {\n  return setDoc(doc(store, collection_name, id), msg);\n};\ndb.delete = async function (id) {\n  return deleteDoc(doc(store, collection_name, id));\n};\n\nexport { db, useDB };\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCxnHdHGicbw16DmQfEbNVy7XD6ENprVNQ\",\n  authDomain: \"chatter2021-2b8fb.firebaseapp.com\",\n  projectId: \"chatter2021-2b8fb\",\n  storageBucket: \"chatter2021-2b8fb.appspot.com\",\n  messagingSenderId: \"778098356347\",\n  appId: \"1:778098356347:web:c396b31d7a0a5c0c6c32de\",\n};\n\nconst app = initializeApp(firebaseConfig);\nstore = getFirestore(app);",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":8,"nodeType":"51","messageId":"52","endLine":5,"endColumn":18},{"ruleId":"49","severity":1,"message":"53","line":7,"column":10,"nodeType":"51","messageId":"52","endLine":7,"endColumn":20},{"ruleId":"54","severity":1,"message":"55","line":38,"column":14,"nodeType":"56","messageId":"57","endLine":41,"endColumn":7},{"ruleId":"49","severity":1,"message":"58","line":4,"column":10,"nodeType":"51","messageId":"52","endLine":4,"endColumn":16},{"ruleId":"59","severity":1,"message":"60","line":27,"column":13,"nodeType":"61","messageId":"62","endLine":27,"endColumn":27},{"ruleId":"63","severity":1,"message":"64","line":31,"column":55,"nodeType":"65","endLine":31,"endColumn":78},{"ruleId":"45","replacedBy":"66"},{"ruleId":"47","replacedBy":"67"},{"ruleId":"49","severity":1,"message":"68","line":15,"column":14,"nodeType":"51","messageId":"52","endLine":15,"endColumn":16},{"ruleId":"69","severity":1,"message":"70","line":34,"column":13,"nodeType":"71","endLine":45,"endColumn":4},{"ruleId":"49","severity":1,"message":"72","line":38,"column":11,"nodeType":"51","messageId":"52","endLine":38,"endColumn":22},"no-native-reassign",["73"],"no-negated-in-lhs",["74"],"no-unused-vars","'ChatBubble' is defined but never used.","Identifier","unusedVar","'AiFillEdit' is defined but never used.","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText","putCommentInBraces","'FiSend' is defined but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["73"],["74"],"'ok' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'unsubscribe' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]